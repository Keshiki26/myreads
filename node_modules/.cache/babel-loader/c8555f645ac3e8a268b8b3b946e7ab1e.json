{"ast":null,"code":"import _objectSpread from\"/Users/razbasnet/Desktop/react/GitHub/myreads/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var api='https://reactnd-books-api.udacity.com';// Generate a unique token for storing your bookshelf data on the backend server.\nvar token=localStorage.token;if(!token)token=localStorage.token=Math.random().toString(37).substr(-8);var headers={Accept:'application/json',Authorization:token};export var get=function get(bookId){return fetch(\"\".concat(api,\"/books/\").concat(bookId),{headers:headers}).then(function(res){return res.json();}).then(function(data){return data.book;});};export var getAll=function getAll(){return fetch(\"\".concat(api,\"/books\"),{headers:headers}).then(function(res){return res.json();}).then(function(data){return data.books;});};export var update=function update(book,shelf){return fetch(\"\".concat(api,\"/books/\").concat(book.id),{method:'PUT',headers:_objectSpread(_objectSpread({},headers),{},{'Content-Type':'application/json'}),body:JSON.stringify({shelf:shelf})}).then(function(res){return res.json();});};export var search=function search(query){return fetch(\"\".concat(api,\"/search\"),{method:'POST',headers:_objectSpread(_objectSpread({},headers),{},{'Content-Type':'application/json'}),body:JSON.stringify({query:query})}).then(function(res){return res.json();}).then(function(data){return data.books;});};","map":{"version":3,"sources":["/Users/razbasnet/Desktop/react/GitHub/myreads/src/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query"],"mappings":"mKAAA,GAAMA,CAAAA,GAAG,CAAG,uCAAZ,CAEA;AACA,GAAIC,CAAAA,KAAK,CAAGC,YAAY,CAACD,KAAzB,CACA,GAAI,CAACA,KAAL,CAAYA,KAAK,CAAGC,YAAY,CAACD,KAAb,CAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B,CAEZ,GAAMC,CAAAA,OAAO,CAAG,CACfC,MAAM,CAAE,kBADO,CAEfC,aAAa,CAAER,KAFA,CAAhB,CAKA,MAAO,IAAMS,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACC,MAAD,QAClBC,CAAAA,KAAK,WAAIZ,GAAJ,mBAAiBW,MAAjB,EAA2B,CAAEJ,OAAO,CAAPA,OAAF,CAA3B,CAAL,CAA6CM,IAA7C,CAAkD,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EAAlD,EAAuEF,IAAvE,CAA4E,SAACG,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAf,EAA5E,CADkB,EAAZ,CAGP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAMN,CAAAA,KAAK,WAAIZ,GAAJ,WAAiB,CAAEO,OAAO,CAAPA,OAAF,CAAjB,CAAL,CAAmCM,IAAnC,CAAwC,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EAAxC,EAA6DF,IAA7D,CAAkE,SAACG,IAAD,QAAUA,CAAAA,IAAI,CAACG,KAAf,EAAlE,CAAN,EAAf,CAEP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACH,IAAD,CAAOI,KAAP,QACrBT,CAAAA,KAAK,WAAIZ,GAAJ,mBAAiBiB,IAAI,CAACK,EAAtB,EAA4B,CAChCC,MAAM,CAAE,KADwB,CAEhChB,OAAO,gCACHA,OADG,MAEN,eAAgB,kBAFV,EAFyB,CAMhCiB,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEL,KAAK,CAALA,KAAF,CAAf,CAN0B,CAA5B,CAAL,CAOGR,IAPH,CAOQ,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EAPR,CADqB,EAAf,CAUP,MAAO,IAAMY,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,QACrBhB,CAAAA,KAAK,WAAIZ,GAAJ,YAAkB,CACtBuB,MAAM,CAAE,MADc,CAEtBhB,OAAO,gCACHA,OADG,MAEN,eAAgB,kBAFV,EAFe,CAMtBiB,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEE,KAAK,CAALA,KAAF,CAAf,CANgB,CAAlB,CAAL,CAQEf,IARF,CAQO,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EARP,EASEF,IATF,CASO,SAACG,IAAD,QAAUA,CAAAA,IAAI,CAACG,KAAf,EATP,CADqB,EAAf","sourcesContent":["const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(37).substr(-8);\n\nconst headers = {\n\tAccept: 'application/json',\n\tAuthorization: token\n};\n\nexport const get = (bookId) =>\n\tfetch(`${api}/books/${bookId}`, { headers }).then((res) => res.json()).then((data) => data.book);\n\nexport const getAll = () => fetch(`${api}/books`, { headers }).then((res) => res.json()).then((data) => data.books);\n\nexport const update = (book, shelf) =>\n\tfetch(`${api}/books/${book.id}`, {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\t...headers,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({ shelf })\n\t}).then((res) => res.json());\n\nexport const search = (query) =>\n\tfetch(`${api}/search`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t...headers,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({ query })\n\t})\n\t\t.then((res) => res.json())\n\t\t.then((data) => data.books);\n"]},"metadata":{},"sourceType":"module"}